# nginx.conf

worker_processes auto;

events {}

http {
    include /etc/nginx/mime.types;

    # Forwarded header
    map $remote_addr $proxy_forwarded_elem {
        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$ "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }

    proxy_set_header Forwarded "$proxy_add_forwarded;port=$remote_port;proto=$scheme;host=$host;secret=";

    absolute_redirect off;  # Used to prevent issues with port forwarding or other reverse proxies

    server {
        listen 80;
        server_name "";

        # Landing page of guardian
        location = / {
            proxy_pass http://web;
        }

        location / {
            proxy_pass http://web;

            auth_request /auth;  # Require authentication
        }

        location /events/ {
            alias /data;
            autoindex on;

            auth_request /auth;  # Require authentication
        }

        location /auth {
            internal;
            proxy_pass http://web/auth;
            proxy_intercept_errors off;
        }

        location = /login {
            proxy_pass http://web/login;
        }

        proxy_intercept_errors on;

        error_page 401 @unauthorized;

        location @unauthorized {
            return 302 /login?redirect=$uri;
        }
    }
}